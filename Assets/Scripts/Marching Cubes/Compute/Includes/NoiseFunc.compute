#include "SimplexNoise3D.compute"

// Taken from Sebastian Lague https://github.com/SebLague/Terraforming/blob/main/Assets/Marching%20Cubes/Scripts/Compute/PlanetMap.compute
float4 fbm(int numLayers, float lacunarity, float persistence, float scale, float3 pos)
{
    float density = 0;
    float3 normal = 0;
    float frequency = scale / 100;
    float amplitude = 1;
    
    for (int i = 0; i < numLayers; i++)
    {
        float4 n = SimplexNoiseGrad(pos * frequency);
        density += n.w * amplitude;
        normal += n.xyz * amplitude;
        
        amplitude *= persistence;
        frequency *= lacunarity;
    }
    
    normal = -normalize(normal);
    
    float groundDiff = -pos.y * 0.2f + 10;
    float4 ground = float4(0, 1, 
    0, groundDiff);
    
    return float4(normalize(lerp(ground.xyz, normal, density / -groundDiff)), density + ground.w);
}

/*
float3 fbmNormal(int numLayers, float lacunarity, float persistence, float scale, float3 pos)
{
    float d = 0.01f;
    return -float3(
        (fbm(numLayers, lacunarity, persistence, scale, pos + float3(d, 0, 0)) - 
        fbm(numLayers, lacunarity, persistence, scale, pos - float3(d, 0, 0))) / (2 * d),
        (fbm(numLayers, lacunarity, persistence, scale, pos + float3(0, d, 0)) -
        fbm(numLayers, lacunarity, persistence, scale, pos - float3(0, d, 0))) / (2 * d),
        (fbm(numLayers, lacunarity, persistence, scale, pos + float3(0, 0, d)) -
        fbm(numLayers, lacunarity, persistence, scale, pos - float3(0, 0, d))) / (2 * d));  
}
*/

float4 getNoise(float noiseScale, float3 pos)
{
    float4 density = fbm(6, 2, 0.4f, noiseScale, pos);
    return density;
}