// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "Includes/NoiseFunc.compute"

RWTexture3D<float> DensityTexture;
RWStructuredBuffer<int2> DensityTypeFlags;
int textureSize;
float noiseScale;
float noiseMult;
float surfaceLevel;

float chunkScale;

float3 offset;

[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= textureSize || id.y >= textureSize || id.z >= textureSize)
    {
        return;
    }
    
    float3 pos = id * chunkScale + offset;
    float density = getNoise(noiseScale, pos).w; //SimplexNoise(pos.xyz * noiseScale);
    /*float density = -pos.y * 0.5f;
    float noiseMask = fbm(6, 2, 0.6f, noiseScale * 0.01f, pos2D);
    noiseMask *= noiseMask * 20;
    density += fbm(6, 2, 0.5f, noiseScale, pos) * noiseMult + noiseMask;*/
    
    if (density > surfaceLevel)
    {
        DensityTypeFlags[0].x = 1;
    }
    else
    {
        DensityTypeFlags[0].y = 1;
    }
    
    DensityTexture[id] = density; //(pos.y / textureSize) - 0.5f + (SimplexNoise(pos * noiseScale) * 0.2f);
}
