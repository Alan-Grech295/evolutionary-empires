// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "Includes/SimplexNoise3D.compute"

RWTexture3D<float> DensityTexture;
int textureSize;
float noiseScale;
float noiseMult;

float chunkScale;

float3 offset;

// Taken from Sebastian Lague https://github.com/SebLague/Terraforming/blob/main/Assets/Marching%20Cubes/Scripts/Compute/PlanetMap.compute
float fbm(int numLayers, float lacunarity, float persistence, float scale, float3 pos)
{
    float density = 0;
    float frequency = scale / 100;
    float amplitude = 1;
    
    for (int i = 0; i < numLayers; i++)
    {
        float n = 1 - abs(SimplexNoise(pos * frequency) * 2 - 1);
        density += n * amplitude;
        
        amplitude *= persistence;
        frequency *= lacunarity;
    }
    
    return density;
}

[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= textureSize || id.y >= textureSize || id.z >= textureSize)
    {
        return;
    }
    
    float3 pos = id * chunkScale + offset;
    float density = -pos.y * 0.5f;
    density += fbm(6, 2, 0.5f, noiseScale, pos) * noiseMult;
    
    DensityTexture[id] = density; //(pos.y / textureSize) - 0.5f + (SimplexNoise(pos * noiseScale) * 0.2f);
}
